{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AbstractPoetryDataFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/TestStorage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "EmbeddingBlob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "test-container"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnprocessedAbstracts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UnprocessedMetadata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RawAbstracts1.gz",
						"container": "unprocessed-abstracts"
					},
					"compression": {
						"type": "gzip"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"corpusid": {
							"type": "integer"
						},
						"openaccessinfo": {
							"type": "object",
							"properties": {
								"externalids": {
									"type": "object",
									"properties": {
										"MAG": {
											"type": "string"
										},
										"ACL": {
											"type": "null"
										},
										"DOI": {
											"type": "null"
										},
										"PubMedCentral": {
											"type": "null"
										},
										"ArXiv": {
											"type": "null"
										}
									}
								},
								"license": {
									"type": "null"
								},
								"url": {
									"type": "null"
								},
								"status": {
									"type": "null"
								}
							}
						},
						"abstract": {
							"type": "string"
						},
						"updated": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnprocessedAuthors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UnprocessedMetadata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RawAuthors1.gz",
						"container": "unprocessed-authors"
					},
					"compression": {
						"type": "gzip"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"authorid": {
							"type": "string"
						},
						"externalids": {
							"type": "null"
						},
						"url": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"aliases": {
							"type": "null"
						},
						"affiliations": {
							"type": "null"
						},
						"homepage": {
							"type": "null"
						},
						"papercount": {
							"type": "integer"
						},
						"citationcount": {
							"type": "integer"
						},
						"hindex": {
							"type": "integer"
						},
						"updated": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnprocessedCitations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UnprocessedMetadata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RawCitations1.gz",
						"container": "unprocessed-citations"
					},
					"compression": {
						"type": "gzip"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnprocessedMetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UnprocessedMetadata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RawMetadata1.gz",
						"container": "unprocessed-metadata"
					},
					"compression": {
						"type": "gzip"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"corpusid": {
							"type": "integer"
						},
						"externalids": {
							"type": "object",
							"properties": {
								"ACL": {
									"type": "null"
								},
								"DBLP": {
									"type": "null"
								},
								"ArXiv": {
									"type": "null"
								},
								"MAG": {
									"type": "string"
								},
								"CorpusId": {
									"type": "string"
								},
								"PubMed": {
									"type": "null"
								},
								"DOI": {
									"type": "string"
								},
								"PubMedCentral": {
									"type": "null"
								}
							}
						},
						"url": {
							"type": "string"
						},
						"title": {
							"type": "string"
						},
						"authors": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"authorId": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								}
							}
						},
						"venue": {
							"type": "string"
						},
						"year": {
							"type": "integer"
						},
						"referencecount": {
							"type": "integer"
						},
						"citationcount": {
							"type": "integer"
						},
						"influentialcitationcount": {
							"type": "integer"
						},
						"isopenaccess": {
							"type": "boolean"
						},
						"s2fieldsofstudy": {
							"type": "null"
						},
						"updated": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnprocessedTLDRs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UnprocessedMetadata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "tldrs-sample.jsonl",
						"container": "unprocessed-tldrs"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"corpusid": {
							"type": "integer"
						},
						"model": {
							"type": "string"
						},
						"text": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BatchAbstractUpload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBlobMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ProcessedAbstracts",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "SelectSomeMetadata",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetBlobMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetBlobMetadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(take(activity('GetBlobMetadata').output.childItems, 1), item())\n\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachMetadataFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SelectSomeMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SelectSomeMetadata').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SendAbstractJSON",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "SendAbstractJSON",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\"blob_url\": \"https://abstractpoetry.blob.core.windows.net/processed-abstracts/@{item().name}\"}",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "BlobsToBytesService",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BatchMetadataUpload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBlobMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ProcessedMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "SelectSomeMetadata",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetBlobMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetBlobMetadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(take(activity('GetBlobMetadata').output.childItems, 1), item())\n\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachMetadataFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SelectSomeMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SelectSomeMetadata').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "UploadJSONToUpstash",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "SendMetadataJSON",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\"blob_url\": \"https://abstractpoetry.blob.core.windows.net/processed-metadata/@{item().name}\"}",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "BlobsToBytesService",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BatchVectorDatabaseUpload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteForProcessedEmbedings",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetBlobMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetBlobMetadata').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SendEmbeddings",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "UploadEmbeddings",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\"blob_url\": \"https://abstractpoetry.blob.core.windows.net/processed-embeddings/@{item().name}\"}",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "BlobsToBytesService",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetBlobMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ProcessedEmbeddings",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmbeddingDownload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RawEmbeddingDownload",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SemanticDBEmbeddings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RawEmbeddings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-24T23:05:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyRawData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SpecificRAWEmbedding",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RenamedRawEmbeddings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDownload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RawMetadataDownload",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 8
						},
						"inputs": [
							{
								"referenceName": "SemanticDBMetadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "UnprocessedCitations",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UnprocessedCitations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmbeddingConversion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SplitEmbeddings",
								"type": "DatasetReference"
							},
							"name": "RawSplitEmbedding"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProcessedEmbeddings",
								"type": "DatasetReference"
							},
							"name": "ProcessedEmbeddings"
						}
					],
					"transformations": [
						{
							"name": "SelectIDAndModel"
						},
						{
							"name": "AddVectorColumn"
						},
						{
							"name": "AggregateByVector"
						},
						{
							"name": "RemoveAggregationColumn"
						},
						{
							"name": "ConvertStringToList"
						}
					],
					"scriptLines": [
						"parameters{",
						"     fileName as string",
						"}",
						"source(output(",
						"          corpusid as string,",
						"          model as string,",
						"          updated as string,",
						"          vector as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:[($fileName)]) ~> RawSplitEmbedding",
						"RawSplitEmbedding select(mapColumn(",
						"          id = corpusid,",
						"          values = vector",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectIDAndModel",
						"ConvertStringToList derive(vectors = \"vectors\") ~> AddVectorColumn",
						"AddVectorColumn aggregate(groupBy(vectors),",
						"     new_vector = collect(@(id=id, values=values))) ~> AggregateByVector",
						"AggregateByVector select(mapColumn(",
						"          vectors = new_vector",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveAggregationColumn",
						"SelectIDAndModel derive(values = map(split(dropRight(dropLeft(values, 1), 1), \",\"), toDouble(trim(#item)))) ~> ConvertStringToList",
						"RemoveAggregationColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($fileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ProcessedEmbeddings"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataConversion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UnprocessedAbstracts",
								"type": "DatasetReference"
							},
							"name": "Abstracts"
						},
						{
							"dataset": {
								"referenceName": "UnprocessedMetadata",
								"type": "DatasetReference"
							},
							"name": "Metadata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProcessedMetadata",
								"type": "DatasetReference"
							},
							"name": "MetadataSink"
						},
						{
							"dataset": {
								"referenceName": "ProcessedAbstracts",
								"type": "DatasetReference"
							},
							"name": "AbstractSink"
						}
					],
					"transformations": [
						{
							"name": "RemoveUnnecessaryColumns"
						},
						{
							"name": "DeriveDOI"
						},
						{
							"name": "RemoveColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          corpusid as integer,",
						"          openaccessinfo as (externalids as (MAG as string, ACL as string, DOI as string, PubMedCentral as string, ArXiv as string), license as string, url as string, status as string),",
						"          abstract as string,",
						"          updated as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> Abstracts",
						"source(output(",
						"          corpusid as integer,",
						"          externalids as (ACL as string, DBLP as string, ArXiv as string, MAG as string, CorpusId as string, PubMed as string, DOI as string, PubMedCentral as string),",
						"          url as string,",
						"          title as string,",
						"          authors as (authorId as string, name as string)[],",
						"          venue as string,",
						"          year as integer,",
						"          referencecount as integer,",
						"          citationcount as integer,",
						"          influentialcitationcount as integer,",
						"          isopenaccess as boolean,",
						"          s2fieldsofstudy as string,",
						"          updated as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> Metadata",
						"DeriveDOI select(mapColumn(",
						"          corpusid,",
						"          title,",
						"          doi,",
						"          url,",
						"          authors,",
						"          year,",
						"          referencecount,",
						"          citationcount,",
						"          influentialcitationcount,",
						"          isopenaccess,",
						"          s2fieldsofstudy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveUnnecessaryColumns",
						"Metadata derive(doi = externalids.DOI) ~> DeriveDOI",
						"Abstracts select(mapColumn(",
						"          corpusid,",
						"          abstract",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns",
						"RemoveUnnecessaryColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:'metadata[n].json',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          corpusid,",
						"          title,",
						"          doi,",
						"          url,",
						"          authors,",
						"          year,",
						"          referencecount,",
						"          citationcount,",
						"          influentialcitationcount,",
						"          isopenaccess,",
						"          s2fieldsofstudy",
						"     ),",
						"     partitionBy('roundRobin', 8000)) ~> MetadataSink",
						"RemoveColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:'abstract[n].json',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('roundRobin', 8000)) ~> AbstractSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UnprocessedAbstracts')]",
				"[concat(variables('factoryId'), '/datasets/UnprocessedMetadata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SplitEmbedding')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RawEmbeddings",
								"type": "DatasetReference"
							},
							"name": "RawEmbeddings"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SplitEmbeddings",
								"type": "DatasetReference"
							},
							"name": "SplitEmbeddings"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          corpusid as integer,",
						"          model as string,",
						"          vector as string,",
						"          updated as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> RawEmbeddings",
						"RawEmbeddings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:'embeddings[n].json',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('roundRobin', 33000)) ~> SplitEmbeddings"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BatchEmbeddingConversion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterValues",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterValues').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "EmbeddingConversion",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "EmbeddingConversion",
											"type": "DataFlowReference",
											"parameters": {
												"fileName": {
													"value": "'@{item().name}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"RawSplitEmbedding": {},
												"ProcessedEmbeddings": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "GetEmbeddingMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SplitEmbeddings",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "FilterValues",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetEmbeddingMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetEmbeddingMetadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(take(activity('GetEmbeddingMetadata').output.childItems, 7000), item())\n\n\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EmbeddingConversion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmbeddingSplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Split Embeddings",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SplitEmbedding",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawEmbeddings": {},
									"SplitEmbeddings": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SplitEmbedding')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataConversion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Convert Metadata",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MetadataConversion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Abstracts": {},
									"Metadata": {},
									"MetadataSink": {},
									"AbstractSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MetadataConversion')]"
			]
		}
	]
}