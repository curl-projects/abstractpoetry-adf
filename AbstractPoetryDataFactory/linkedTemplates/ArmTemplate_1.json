{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AbstractPoetryDataFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MetadataConversion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UnprocessedAbstracts",
								"type": "DatasetReference"
							},
							"name": "Abstracts"
						},
						{
							"dataset": {
								"referenceName": "UnprocessedAuthors",
								"type": "DatasetReference"
							},
							"name": "Authors"
						},
						{
							"dataset": {
								"referenceName": "UnprocessedMetadata",
								"type": "DatasetReference"
							},
							"name": "Metadata"
						},
						{
							"dataset": {
								"referenceName": "UnprocessedTLDRs",
								"type": "DatasetReference"
							},
							"name": "TLDRs"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProcessedEmbeddings",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ProcessedEmbeddings",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "ProcessedEmbeddings",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "ProcessedEmbeddings",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          corpusid as integer,",
						"          openaccessinfo as (externalids as (MAG as string, ACL as string, DOI as string, PubMedCentral as string, ArXiv as string), license as string, url as string, status as string),",
						"          abstract as string,",
						"          updated as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> Abstracts",
						"source(output(",
						"          authorid as string,",
						"          externalids as string,",
						"          url as string,",
						"          name as string,",
						"          aliases as string,",
						"          affiliations as string,",
						"          homepage as string,",
						"          papercount as integer,",
						"          citationcount as integer,",
						"          hindex as integer,",
						"          updated as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> Authors",
						"source(output(",
						"          corpusid as integer,",
						"          externalids as (ACL as string, DBLP as string, ArXiv as string, MAG as string, CorpusId as string, PubMed as string, DOI as string, PubMedCentral as string),",
						"          url as string,",
						"          title as string,",
						"          authors as (authorId as string, name as string)[],",
						"          venue as string,",
						"          year as integer,",
						"          referencecount as integer,",
						"          citationcount as integer,",
						"          influentialcitationcount as integer,",
						"          isopenaccess as boolean,",
						"          s2fieldsofstudy as string,",
						"          updated as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> Metadata",
						"source(output(",
						"          corpusid as integer,",
						"          model as string,",
						"          text as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> TLDRs",
						"Abstracts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"Authors sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"Metadata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3",
						"TLDRs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink4"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmbeddingConversion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EmbeddingConversionActivity",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EmbeddingConversion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawEmbedding": {},
									"ProcessedEmbeddings": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-24T23:42:08Z"
			},
			"dependsOn": []
		}
	]
}